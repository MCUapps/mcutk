########################################################################
# setup project
########################################################################
cmake_minimum_required(VERSION 2.8)
project(STM32)
enable_language(C ASM)


########################################################################
# setup helpers
########################################################################
# import helpers
include(mcutk/helpers.cmake)

# default to just fit
set(GEN_OUTPUTS_BIN_SIZE 0)

# set OpenOCD's target name
JTAG_TARGET(stm32f1x)

########################################################################
# compiler flags
########################################################################
# default CFLAGS, MUST BE MODIFIED TO FIT YOUR OWN NEEDS.
set(
  CMAKE_C_FLAGS
  "-mcpu=cortex-m3 -mthumb -Wall -fno-builtin -fno-common -fomit-frame-pointer -ffunction-sections -O2"
)

SET(ASM_OPTIONS "-x assembler-with-cpp")
SET(CMAKE_ASM_FLAGS "${CFLAGS} ${ASM_OPTIONS}" )

set(
  CMAKE_EXE_LINKER_FLAGS
  "-nostdlib -lgcc -Wl,--gc-sections -T../linkerscript/stm32_flash.ld"
)

########################################################################
# DEBUG or RELEASE
########################################################################
# choose either build type
set(CMAKE_BUILD_TYPE Debug)
#set(CMAKE_BUILD_TYPE Release)

# Debug
set(CMAKE_C_FLAGS_DEBUG "-gdwarf-2")
if (${CMAKE_BUILD_TYPE} STREQUAL "DEBUG")
  add_definitions(-DCONFIG_DEBUG)
endif (${CMAKE_BUILD_TYPE} STREQUAL "DEBUG")

set(CMAKE_ASM_FLAGS_DEBUG "-gstabs")

# RELEASE
set(CMAKE_C_FLAGS_RELEASE "-Os")


########################################################################
# Utilities
########################################################################

set(UART "/dev/cu.usbserial-00102126")

add_custom_target(
  terminal
  COMMAND picocom -b 115200 --imap lfcrlf ${UART}
)


########################################################################
# project targets
########################################################################

# This example target invokes to source directory's Makefile to build 
add_custom_target(build_ch ALL
  COMMAND make
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
)

# Although the above target would always be built, this ensure the dependency order.
add_custom_target(ch.elf
  DEPENDS build_ch
)

GEN_OUTPUTS(ch.elf)
